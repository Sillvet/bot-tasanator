# cron_worker.py
import os, sys, time, signal, subprocess, traceback
from datetime import datetime, timezone

def log(msg):
    print(msg, flush=True)

# --- Playwright bootstrap: instala Chromium si falta ---
def ensure_playwright_chromium():
    os.environ.setdefault("PLAYWRIGHT_BROWSERS_PATH", "/opt/render/.cache/ms-playwright")
    try:
        from playwright.sync_api import sync_playwright
    except Exception:
        log("‚ùå Playwright no est√° instalado (revisa requirements.txt).")
        return
    try:
        with sync_playwright() as p:
            b = p.chromium.launch(headless=True)
            b.close()
        log("‚úÖ Chromium disponible.")
        return
    except Exception as e:
        log(f"‚ÑπÔ∏è Chromium no disponible a√∫n: {e}")

    log("‚¨áÔ∏è Instalando navegadores de Playwright (chromium)‚Ä¶")
    try:
        cmd = [sys.executable, "-m", "playwright", "install", "chromium"]
        proc = subprocess.run(cmd, check=False, text=True, capture_output=True)
        log(proc.stdout or "")
        if proc.returncode != 0:
            log(f"‚ö†Ô∏è 'playwright install chromium' termin√≥ con c√≥digo {proc.returncode}. STDERR:\n{proc.stderr}")
        else:
            from playwright.sync_api import sync_playwright
            with sync_playwright() as p:
                b = p.chromium.launch(headless=True)
                b.close()
            log("‚úÖ Chromium instalado y verificado.")
    except Exception:
        log("‚ùå Error instalando Chromium:")
        log(traceback.format_exc())

log(f"üöÄ cron_worker arrancando | Python: {sys.version}")
try:
    log(f"üìÇ CWD: {os.getcwd()}")
    try:
        log(f"üìÑ Files: {os.listdir('.')}")
    except Exception as _e:
        log(f"‚ö†Ô∏è No pude listar archivos: {_e}")

    TZ = os.getenv("TZ", "America/Caracas")
    os.environ["TZ"] = TZ
    try:
        import pytz
        tz = pytz.timezone(TZ)
        log(f"üïí Zona horaria: {TZ}")
    except Exception:
        log("‚ùå Error importando pytz:")
        log(traceback.format_exc())
        raise

    # Asegura Playwright antes de usarlo en guardar_tasas
    ensure_playwright_chromium()

    try:
        from guardar_tasas import actualizar_todas_las_tasas
    except Exception:
        log("‚ùå Error importando guardar_todas_las_tasas:")
        log(traceback.format_exc())
        raise

    RUN_START = int(os.getenv("RUN_START", "9"))     # 09:00 VET
    RUN_END   = int(os.getenv("RUN_END",   "21"))    # 21:00 VET
    FORCE_RUN = os.getenv("CRON_FORCE_RUN", "0") == "1"

    # >>> CORRECCI√ìN AQU√ç: usar global, no nonlocal <<<
    stop = False
    def _stop(sig, frm):
        global stop
        stop = True
        log(f"üõë Se√±al recibida: {sig}")

    signal.signal(signal.SIGTERM, _stop)
    signal.signal(signal.SIGINT, _stop)

    def now_vet():
        return datetime.now(timezone.utc).astimezone(tz)

    def should_run(dt):
        return RUN_START <= dt.hour <= RUN_END and dt.minute == 0

    last_run_key = None
    log(f"‚è±Ô∏è Cron activo. Ventana: {RUN_START}:00‚Äì{RUN_END}:00 {TZ} | FORCE_RUN={FORCE_RUN}")

    if FORCE_RUN:
        try:
            log("üîÑ FORCE_RUN=1 ‚Üí ejecutando actualizaci√≥n inicial‚Ä¶")
            actualizar_todas_las_tasas()
            log("‚úÖ Actualizaci√≥n inicial OK.")
        except Exception:
            log("‚ùå Error en actualizaci√≥n inicial:")
            log(traceback.format_exc())

    while not stop:
        try:
            dt = now_vet()
            key = (dt.date(), dt.hour)
            if should_run(dt) and key != last_run_key:
                log(f"üîÑ Ejecutando actualizaci√≥n {dt.strftime('%Y-%m-%d %H:%M:%S %Z')}")
                actualizar_todas_las_tasas()
                log("‚úÖ Tasas actualizadas.")
                last_run_key = key
            else:
                if dt.minute % 5 == 0 and dt.second == 0:
                    log(f"üí§ Esperando hora exacta‚Ä¶ ahora {dt.strftime('%H:%M:%S')}")
        except Exception:
            log("‚ùå Error en bucle principal:")
            log(traceback.format_exc())
        time.sleep(1)

    log("üëã Saliendo con gracia.")
except SystemExit:
    raise
except Exception:
    log("üí• Excepci√≥n fatal al iniciar cron_worker:")
    log(traceback.format_exc())
    sys.exit(1)
